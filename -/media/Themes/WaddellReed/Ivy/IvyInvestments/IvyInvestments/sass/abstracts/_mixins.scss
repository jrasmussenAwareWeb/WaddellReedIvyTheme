@import "vars";

@mixin wrapper() {
    //max-width: 960px;
    max-width:1170px;
    margin: 0 auto !important;
}
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

//what does this actually do?
@mixin headings($from: 1, $to: 6) {
    @for $i from $from through $to {
        h#{$i} {
            @content
        }
    }
}

@mixin sronly {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    border: 0;
}

//is our base font size 16 and if so, do we update this?
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

@mixin opensans-font-stack() {
    font-family: "Open Sans", arial, helvetica, sans-serif;
}
@mixin copernicus() {
    font-family: "CopernicusBook", arial, helvetica, sans-serif;
}
@mixin proxima() {
    font-family: "Proxima", arial, helvetica, sans-serif;
}

@mixin proximabold() {
    font-family: "ProximaBold", arial, helvetica, sans-serif;
}

@mixin proximaboldcondensed() {
    font-family: "ProximaBoldCondensed", arial, helvetica, sans-serif;
}

@mixin loading-gif() {
    background-image: url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMiAzMiIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiBmaWxsPSJibGFjayI+DQogIDxwYXRoICBvcGFjaXR5PSIuMjUiIGQ9Ik0xNiAwIEExNiAxNiAwIDAgMCAxNiAzMiBBMTYgMTYgMCAwIDAgMTYgMCBNMTYgNCBBMTIgMTIgMCAwIDEgMTYgMjggQTEyIDEyIDAgMCAxIDE2IDQiLz4NCiAgPHBhdGggZmlsbD0nIzFhODBiNicgZD0iTTE2IDAgQTE2IDE2IDAgMCAxIDMyIDE2IEwyOCAxNiBBMTIgMTIgMCAwIDAgMTYgNHoiPg0KICAgIDxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0icm90YXRlIiBmcm9tPSIwIDE2IDE2IiB0bz0iMzYwIDE2IDE2IiBkdXI9IjAuOHMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIiAvPg0KICA8L3BhdGg+DQo8L3N2Zz4NCg==);
    background-position: center center;
    background-repeat: no-repeat;
}

//Buttons
@mixin btn-default {
    display: inline-block;
    vertical-align: middle;
    box-sizing: border-box;
    margin: 5px 0;
    padding: 10px 15px;
    text-align: center;
    text-decoration: none;
    text-transform:uppercase;
    font-size:$font-normal;
    cursor: pointer;
    border:2px solid $text-green;
    background:$bg-white;
    color:$text-green;
    &:hover{
        color: $text-white;
        background: $bg-green; 
        border:2px solid $text-green;
    }
}

@mixin btn-primary {
    display: inline-block;
    vertical-align: middle;
    box-sizing: border-box;
    margin: 5px 0;
    padding: 10px 15px;
    text-align: center;
    text-decoration: none;
    text-transform:uppercase;
    font-size:$font-normal;
    cursor: pointer;
    border:2px solid $text-green;
    background-color: $text-green;
    color: $text-white;
    &:hover{
        color: $text-green;
        background-color: $bg-basic-color;
    }
}

@mixin btn-block {
    width:100%;
}


/* breakpoints */
$break-large: 1200px; //desktops (min-width)
$break-desktop: 992px; //laptops (min-width)
$break-mobile-large: 768px; //tablets (min/max-width)
$break-mobile-horizontal: 576px; //phones (min/max-width)
$break-mobile: 380px; //compact phones (max-width)

@mixin respond-to($media) {
    @if $media==mobile {
        @media only screen and (max-width: $break-mobile) {
            @content;
        }
    }
    @else if $media==mobile-horizontal {
        @media only screen and (min-width: $break-mobile-horizontal) {
        //@media only screen and (max-width: $break-mobile-horizontal) {
            @content;
        }
    }
    @else if $media==mobile-horizontal-max {
        @media only screen and (max-width: $break-mobile-horizontal) {
            @content;
        }
    }
    @else if $media==mobile-large {
        @media only screen and (max-width: $break-mobile-large - 1) {
            @content;
        }
    }
    @else if $media==tablet {
        @media only screen and (min-width: $break-mobile-large) {
            @content;
        }
    }
    @else if $media==tablet-only {
        @media only screen and (min-width: $break-mobile-large) and (max-width: $break-desktop - 1) {
            @content;
        }
    }
    @else if $media==all-mobile {
        @media only screen and (max-width: $break-desktop - 1) {
            @content;
        }
    }
    @else if $media==desktop {
        @media only screen and (min-width: $break-desktop) {
            @content;
        }
    }
    @else if $media==large {
        @media only screen and (min-width: $break-large) {
            @content;
        }
    }
}
@mixin border-basic($position:all, $border-color:$border-basic-color, $border-width:1px) {
    @if($position!=all) {
        border-#{$position}-width: $border-width;
        border-#{$position}-style: solid;
        border-#{$position}-color: $border-color;
    }
    @else {
        border-width: $border-width;
            border-style: solid;
            border-color: $border-color;
    }
}
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}
@mixin fixed-bg($pos, $min-height:240px) {
    background-position: $pos;
    background-attachment: fixed;
    min-height: $min-height;
}
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}
